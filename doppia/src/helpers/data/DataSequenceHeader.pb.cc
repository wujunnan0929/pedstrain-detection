// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataSequenceHeader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataSequenceHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

namespace {

const ::google::protobuf::Descriptor* DataSequenceAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSequenceAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSequenceHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSequenceHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataSequenceHeader_2eproto() {
  protobuf_AddDesc_DataSequenceHeader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataSequenceHeader.proto");
  GOOGLE_CHECK(file != NULL);
  DataSequenceAttribute_descriptor_ = file->message_type(0);
  static const int DataSequenceAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceAttribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceAttribute, value_),
  };
  DataSequenceAttribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataSequenceAttribute_descriptor_,
      DataSequenceAttribute::default_instance_,
      DataSequenceAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceAttribute, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataSequenceAttribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceAttribute, _internal_metadata_),
      -1);
  DataSequenceHeader_descriptor_ = file->message_type(1);
  static const int DataSequenceHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceHeader, attributes_),
  };
  DataSequenceHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataSequenceHeader_descriptor_,
      DataSequenceHeader::default_instance_,
      DataSequenceHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataSequenceHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSequenceHeader, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataSequenceHeader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataSequenceAttribute_descriptor_, &DataSequenceAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataSequenceHeader_descriptor_, &DataSequenceHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataSequenceHeader_2eproto() {
  delete DataSequenceAttribute::default_instance_;
  delete DataSequenceAttribute_reflection_;
  delete DataSequenceHeader::default_instance_;
  delete DataSequenceHeader_reflection_;
}

void protobuf_AddDesc_DataSequenceHeader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030DataSequenceHeader.proto\022\017doppia_proto"
    "buf\"4\n\025DataSequenceAttribute\022\014\n\004name\030\001 \002"
    "(\t\022\r\n\005value\030\002 \002(\t\"P\n\022DataSequenceHeader\022"
    ":\n\nattributes\030\003 \003(\0132&.doppia_protobuf.Da"
    "taSequenceAttribute", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataSequenceHeader.proto", &protobuf_RegisterTypes);
  DataSequenceAttribute::default_instance_ = new DataSequenceAttribute();
  DataSequenceHeader::default_instance_ = new DataSequenceHeader();
  DataSequenceAttribute::default_instance_->InitAsDefaultInstance();
  DataSequenceHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataSequenceHeader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataSequenceHeader_2eproto {
  StaticDescriptorInitializer_DataSequenceHeader_2eproto() {
    protobuf_AddDesc_DataSequenceHeader_2eproto();
  }
} static_descriptor_initializer_DataSequenceHeader_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSequenceAttribute::kNameFieldNumber;
const int DataSequenceAttribute::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSequenceAttribute::DataSequenceAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:doppia_protobuf.DataSequenceAttribute)
}

void DataSequenceAttribute::InitAsDefaultInstance() {
}

DataSequenceAttribute::DataSequenceAttribute(const DataSequenceAttribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:doppia_protobuf.DataSequenceAttribute)
}

void DataSequenceAttribute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSequenceAttribute::~DataSequenceAttribute() {
  // @@protoc_insertion_point(destructor:doppia_protobuf.DataSequenceAttribute)
  SharedDtor();
}

void DataSequenceAttribute::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataSequenceAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSequenceAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSequenceAttribute_descriptor_;
}

const DataSequenceAttribute& DataSequenceAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataSequenceHeader_2eproto();
  return *default_instance_;
}

DataSequenceAttribute* DataSequenceAttribute::default_instance_ = NULL;

DataSequenceAttribute* DataSequenceAttribute::New(::google::protobuf::Arena* arena) const {
  DataSequenceAttribute* n = new DataSequenceAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSequenceAttribute::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataSequenceAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doppia_protobuf.DataSequenceAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doppia_protobuf.DataSequenceAttribute.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doppia_protobuf.DataSequenceAttribute.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doppia_protobuf.DataSequenceAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doppia_protobuf.DataSequenceAttribute)
  return false;
#undef DO_
}

void DataSequenceAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doppia_protobuf.DataSequenceAttribute)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doppia_protobuf.DataSequenceAttribute.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doppia_protobuf.DataSequenceAttribute.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doppia_protobuf.DataSequenceAttribute)
}

::google::protobuf::uint8* DataSequenceAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:doppia_protobuf.DataSequenceAttribute)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doppia_protobuf.DataSequenceAttribute.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doppia_protobuf.DataSequenceAttribute.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doppia_protobuf.DataSequenceAttribute)
  return target;
}

int DataSequenceAttribute::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int DataSequenceAttribute::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSequenceAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataSequenceAttribute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSequenceAttribute>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSequenceAttribute::MergeFrom(const DataSequenceAttribute& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataSequenceAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSequenceAttribute::CopyFrom(const DataSequenceAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSequenceAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DataSequenceAttribute::Swap(DataSequenceAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSequenceAttribute::InternalSwap(DataSequenceAttribute* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSequenceAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSequenceAttribute_descriptor_;
  metadata.reflection = DataSequenceAttribute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSequenceAttribute

// required string name = 1;
bool DataSequenceAttribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataSequenceAttribute::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DataSequenceAttribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataSequenceAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DataSequenceAttribute::name() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.DataSequenceAttribute.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataSequenceAttribute::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:doppia_protobuf.DataSequenceAttribute.name)
}
 void DataSequenceAttribute::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:doppia_protobuf.DataSequenceAttribute.name)
}
 void DataSequenceAttribute::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:doppia_protobuf.DataSequenceAttribute.name)
}
 ::std::string* DataSequenceAttribute::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.DataSequenceAttribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataSequenceAttribute::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataSequenceAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:doppia_protobuf.DataSequenceAttribute.name)
}

// required string value = 2;
bool DataSequenceAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataSequenceAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void DataSequenceAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataSequenceAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& DataSequenceAttribute::value() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.DataSequenceAttribute.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataSequenceAttribute::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:doppia_protobuf.DataSequenceAttribute.value)
}
 void DataSequenceAttribute::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:doppia_protobuf.DataSequenceAttribute.value)
}
 void DataSequenceAttribute::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:doppia_protobuf.DataSequenceAttribute.value)
}
 ::std::string* DataSequenceAttribute::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.DataSequenceAttribute.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataSequenceAttribute::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataSequenceAttribute::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:doppia_protobuf.DataSequenceAttribute.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSequenceHeader::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSequenceHeader::DataSequenceHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:doppia_protobuf.DataSequenceHeader)
}

void DataSequenceHeader::InitAsDefaultInstance() {
}

DataSequenceHeader::DataSequenceHeader(const DataSequenceHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:doppia_protobuf.DataSequenceHeader)
}

void DataSequenceHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSequenceHeader::~DataSequenceHeader() {
  // @@protoc_insertion_point(destructor:doppia_protobuf.DataSequenceHeader)
  SharedDtor();
}

void DataSequenceHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataSequenceHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSequenceHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSequenceHeader_descriptor_;
}

const DataSequenceHeader& DataSequenceHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataSequenceHeader_2eproto();
  return *default_instance_;
}

DataSequenceHeader* DataSequenceHeader::default_instance_ = NULL;

DataSequenceHeader* DataSequenceHeader::New(::google::protobuf::Arena* arena) const {
  DataSequenceHeader* n = new DataSequenceHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSequenceHeader::Clear() {
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataSequenceHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doppia_protobuf.DataSequenceHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doppia_protobuf.DataSequenceHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doppia_protobuf.DataSequenceHeader)
  return false;
#undef DO_
}

void DataSequenceHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doppia_protobuf.DataSequenceHeader)
  // repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doppia_protobuf.DataSequenceHeader)
}

::google::protobuf::uint8* DataSequenceHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:doppia_protobuf.DataSequenceHeader)
  // repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doppia_protobuf.DataSequenceHeader)
  return target;
}

int DataSequenceHeader::ByteSize() const {
  int total_size = 0;

  // repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSequenceHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataSequenceHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSequenceHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSequenceHeader::MergeFrom(const DataSequenceHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  attributes_.MergeFrom(from.attributes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataSequenceHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSequenceHeader::CopyFrom(const DataSequenceHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSequenceHeader::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attributes())) return false;
  return true;
}

void DataSequenceHeader::Swap(DataSequenceHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSequenceHeader::InternalSwap(DataSequenceHeader* other) {
  attributes_.UnsafeArenaSwap(&other->attributes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSequenceHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSequenceHeader_descriptor_;
  metadata.reflection = DataSequenceHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSequenceHeader

// repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
int DataSequenceHeader::attributes_size() const {
  return attributes_.size();
}
void DataSequenceHeader::clear_attributes() {
  attributes_.Clear();
}
const ::doppia_protobuf::DataSequenceAttribute& DataSequenceHeader::attributes(int index) const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.DataSequenceHeader.attributes)
  return attributes_.Get(index);
}
::doppia_protobuf::DataSequenceAttribute* DataSequenceHeader::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.DataSequenceHeader.attributes)
  return attributes_.Mutable(index);
}
::doppia_protobuf::DataSequenceAttribute* DataSequenceHeader::add_attributes() {
  // @@protoc_insertion_point(field_add:doppia_protobuf.DataSequenceHeader.attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute >*
DataSequenceHeader::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:doppia_protobuf.DataSequenceHeader.attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute >&
DataSequenceHeader::attributes() const {
  // @@protoc_insertion_point(field_list:doppia_protobuf.DataSequenceHeader.attributes)
  return attributes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

// @@protoc_insertion_point(global_scope)
