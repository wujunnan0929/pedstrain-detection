// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stixels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stixels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

namespace {

const ::google::protobuf::Descriptor* Stixel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stixel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stixel_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Stixels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stixels_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stixels_2eproto() {
  protobuf_AddDesc_stixels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stixels.proto");
  GOOGLE_CHECK(file != NULL);
  Stixel_descriptor_ = file->message_type(0);
  static const int Stixel_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, bottom_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, top_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, disparity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, backward_delta_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, valid_delta_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, backward_width_),
  };
  Stixel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stixel_descriptor_,
      Stixel::default_instance_,
      Stixel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stixel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixel, _internal_metadata_),
      -1);
  Stixel_Type_descriptor_ = Stixel_descriptor_->enum_type(0);
  Stixels_descriptor_ = file->message_type(1);
  static const int Stixels_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixels, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixels, stixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixels, ground_top_and_bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixels, ground_plane_),
  };
  Stixels_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stixels_descriptor_,
      Stixels::default_instance_,
      Stixels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixels, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stixels),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stixels, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stixels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stixel_descriptor_, &Stixel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stixels_descriptor_, &Stixels::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stixels_2eproto() {
  delete Stixel::default_instance_;
  delete Stixel_reflection_;
  delete Stixels::default_instance_;
  delete Stixels_reflection_;
}

void protobuf_AddDesc_stixels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::doppia_protobuf::protobuf_AddDesc_ground_5ftop_5fand_5fbottom_2eproto();
  ::doppia_protobuf::protobuf_AddDesc_plane3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rstixels.proto\022\017doppia_protobuf\032\033ground"
    "_top_and_bottom.proto\032\rplane3d.proto\"\246\002\n"
    "\006Stixel\022\r\n\005width\030\001 \002(\r\022\t\n\001x\030\002 \002(\r\022\020\n\010bot"
    "tom_y\030\003 \002(\r\022\r\n\005top_y\030\004 \002(\r\022\021\n\tdisparity\030"
    "\005 \002(\r\022*\n\004type\030\006 \002(\0162\034.doppia_protobuf.St"
    "ixel.Type\022\033\n\020backward_delta_x\030\007 \001(\005:\0010\022\034"
    "\n\rvalid_delta_x\030\010 \001(\010:\005false\022\031\n\016backward"
    "_width\030\t \001(\005:\0011\"L\n\004Type\022\013\n\007Unknown\020\000\022\014\n\010"
    "Occluded\020\001\022\007\n\003Car\020\002\022\016\n\nPedestrian\020\003\022\020\n\014S"
    "taticObject\020\004\"\273\001\n\007Stixels\022\022\n\nimage_name\030"
    "\001 \001(\t\022(\n\007stixels\030\002 \003(\0132\027.doppia_protobuf"
    ".Stixel\022B\n\025ground_top_and_bottom\030\003 \001(\0132#"
    ".doppia_protobuf.GroundTopAndBottom\022.\n\014g"
    "round_plane\030\004 \001(\0132\030.doppia_protobuf.Plan"
    "e3d", 563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stixels.proto", &protobuf_RegisterTypes);
  Stixel::default_instance_ = new Stixel();
  Stixels::default_instance_ = new Stixels();
  Stixel::default_instance_->InitAsDefaultInstance();
  Stixels::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stixels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stixels_2eproto {
  StaticDescriptorInitializer_stixels_2eproto() {
    protobuf_AddDesc_stixels_2eproto();
  }
} static_descriptor_initializer_stixels_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Stixel_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stixel_Type_descriptor_;
}
bool Stixel_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Stixel_Type Stixel::Unknown;
const Stixel_Type Stixel::Occluded;
const Stixel_Type Stixel::Car;
const Stixel_Type Stixel::Pedestrian;
const Stixel_Type Stixel::StaticObject;
const Stixel_Type Stixel::Type_MIN;
const Stixel_Type Stixel::Type_MAX;
const int Stixel::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stixel::kWidthFieldNumber;
const int Stixel::kXFieldNumber;
const int Stixel::kBottomYFieldNumber;
const int Stixel::kTopYFieldNumber;
const int Stixel::kDisparityFieldNumber;
const int Stixel::kTypeFieldNumber;
const int Stixel::kBackwardDeltaXFieldNumber;
const int Stixel::kValidDeltaXFieldNumber;
const int Stixel::kBackwardWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stixel::Stixel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:doppia_protobuf.Stixel)
}

void Stixel::InitAsDefaultInstance() {
}

Stixel::Stixel(const Stixel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:doppia_protobuf.Stixel)
}

void Stixel::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  x_ = 0u;
  bottom_y_ = 0u;
  top_y_ = 0u;
  disparity_ = 0u;
  type_ = 0;
  backward_delta_x_ = 0;
  valid_delta_x_ = false;
  backward_width_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stixel::~Stixel() {
  // @@protoc_insertion_point(destructor:doppia_protobuf.Stixel)
  SharedDtor();
}

void Stixel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stixel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stixel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stixel_descriptor_;
}

const Stixel& Stixel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stixels_2eproto();
  return *default_instance_;
}

Stixel* Stixel::default_instance_ = NULL;

Stixel* Stixel::New(::google::protobuf::Arena* arena) const {
  Stixel* n = new Stixel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stixel::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stixel*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(width_, valid_delta_x_);
  }
  backward_width_ = 1;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stixel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doppia_protobuf.Stixel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bottom_y;
        break;
      }

      // required uint32 bottom_y = 3;
      case 3: {
        if (tag == 24) {
         parse_bottom_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_y_)));
          set_has_bottom_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_top_y;
        break;
      }

      // required uint32 top_y = 4;
      case 4: {
        if (tag == 32) {
         parse_top_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_y_)));
          set_has_top_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_disparity;
        break;
      }

      // required uint32 disparity = 5;
      case 5: {
        if (tag == 40) {
         parse_disparity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disparity_)));
          set_has_disparity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required .doppia_protobuf.Stixel.Type type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::doppia_protobuf::Stixel_Type_IsValid(value)) {
            set_type(static_cast< ::doppia_protobuf::Stixel_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_backward_delta_x;
        break;
      }

      // optional int32 backward_delta_x = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_backward_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backward_delta_x_)));
          set_has_backward_delta_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_valid_delta_x;
        break;
      }

      // optional bool valid_delta_x = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_valid_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_delta_x_)));
          set_has_valid_delta_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_backward_width;
        break;
      }

      // optional int32 backward_width = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_backward_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backward_width_)));
          set_has_backward_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doppia_protobuf.Stixel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doppia_protobuf.Stixel)
  return false;
#undef DO_
}

void Stixel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doppia_protobuf.Stixel)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 bottom_y = 3;
  if (has_bottom_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bottom_y(), output);
  }

  // required uint32 top_y = 4;
  if (has_top_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->top_y(), output);
  }

  // required uint32 disparity = 5;
  if (has_disparity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->disparity(), output);
  }

  // required .doppia_protobuf.Stixel.Type type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional int32 backward_delta_x = 7 [default = 0];
  if (has_backward_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->backward_delta_x(), output);
  }

  // optional bool valid_delta_x = 8 [default = false];
  if (has_valid_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->valid_delta_x(), output);
  }

  // optional int32 backward_width = 9 [default = 1];
  if (has_backward_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->backward_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doppia_protobuf.Stixel)
}

::google::protobuf::uint8* Stixel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:doppia_protobuf.Stixel)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // required uint32 bottom_y = 3;
  if (has_bottom_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bottom_y(), target);
  }

  // required uint32 top_y = 4;
  if (has_top_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->top_y(), target);
  }

  // required uint32 disparity = 5;
  if (has_disparity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->disparity(), target);
  }

  // required .doppia_protobuf.Stixel.Type type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional int32 backward_delta_x = 7 [default = 0];
  if (has_backward_delta_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->backward_delta_x(), target);
  }

  // optional bool valid_delta_x = 8 [default = false];
  if (has_valid_delta_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->valid_delta_x(), target);
  }

  // optional int32 backward_width = 9 [default = 1];
  if (has_backward_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->backward_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doppia_protobuf.Stixel)
  return target;
}

int Stixel::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_x()) {
    // required uint32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  if (has_bottom_y()) {
    // required uint32 bottom_y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bottom_y());
  }

  if (has_top_y()) {
    // required uint32 top_y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->top_y());
  }

  if (has_disparity()) {
    // required uint32 disparity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->disparity());
  }

  if (has_type()) {
    // required .doppia_protobuf.Stixel.Type type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int Stixel::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());

    // required uint32 bottom_y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bottom_y());

    // required uint32 top_y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->top_y());

    // required uint32 disparity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->disparity());

    // required .doppia_protobuf.Stixel.Type type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional int32 backward_delta_x = 7 [default = 0];
    if (has_backward_delta_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backward_delta_x());
    }

    // optional bool valid_delta_x = 8 [default = false];
    if (has_valid_delta_x()) {
      total_size += 1 + 1;
    }

  }
  // optional int32 backward_width = 9 [default = 1];
  if (has_backward_width()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backward_width());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stixel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stixel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stixel>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stixel::MergeFrom(const Stixel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_bottom_y()) {
      set_bottom_y(from.bottom_y());
    }
    if (from.has_top_y()) {
      set_top_y(from.top_y());
    }
    if (from.has_disparity()) {
      set_disparity(from.disparity());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_backward_delta_x()) {
      set_backward_delta_x(from.backward_delta_x());
    }
    if (from.has_valid_delta_x()) {
      set_valid_delta_x(from.valid_delta_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_backward_width()) {
      set_backward_width(from.backward_width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stixel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stixel::CopyFrom(const Stixel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stixel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Stixel::Swap(Stixel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stixel::InternalSwap(Stixel* other) {
  std::swap(width_, other->width_);
  std::swap(x_, other->x_);
  std::swap(bottom_y_, other->bottom_y_);
  std::swap(top_y_, other->top_y_);
  std::swap(disparity_, other->disparity_);
  std::swap(type_, other->type_);
  std::swap(backward_delta_x_, other->backward_delta_x_);
  std::swap(valid_delta_x_, other->valid_delta_x_);
  std::swap(backward_width_, other->backward_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stixel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stixel_descriptor_;
  metadata.reflection = Stixel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stixel

// required uint32 width = 1;
bool Stixel::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stixel::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void Stixel::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stixel::clear_width() {
  width_ = 0u;
  clear_has_width();
}
 ::google::protobuf::uint32 Stixel::width() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.width)
  return width_;
}
 void Stixel::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.width)
}

// required uint32 x = 2;
bool Stixel::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stixel::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Stixel::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stixel::clear_x() {
  x_ = 0u;
  clear_has_x();
}
 ::google::protobuf::uint32 Stixel::x() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.x)
  return x_;
}
 void Stixel::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.x)
}

// required uint32 bottom_y = 3;
bool Stixel::has_bottom_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stixel::set_has_bottom_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Stixel::clear_has_bottom_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stixel::clear_bottom_y() {
  bottom_y_ = 0u;
  clear_has_bottom_y();
}
 ::google::protobuf::uint32 Stixel::bottom_y() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.bottom_y)
  return bottom_y_;
}
 void Stixel::set_bottom_y(::google::protobuf::uint32 value) {
  set_has_bottom_y();
  bottom_y_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.bottom_y)
}

// required uint32 top_y = 4;
bool Stixel::has_top_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Stixel::set_has_top_y() {
  _has_bits_[0] |= 0x00000008u;
}
void Stixel::clear_has_top_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void Stixel::clear_top_y() {
  top_y_ = 0u;
  clear_has_top_y();
}
 ::google::protobuf::uint32 Stixel::top_y() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.top_y)
  return top_y_;
}
 void Stixel::set_top_y(::google::protobuf::uint32 value) {
  set_has_top_y();
  top_y_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.top_y)
}

// required uint32 disparity = 5;
bool Stixel::has_disparity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Stixel::set_has_disparity() {
  _has_bits_[0] |= 0x00000010u;
}
void Stixel::clear_has_disparity() {
  _has_bits_[0] &= ~0x00000010u;
}
void Stixel::clear_disparity() {
  disparity_ = 0u;
  clear_has_disparity();
}
 ::google::protobuf::uint32 Stixel::disparity() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.disparity)
  return disparity_;
}
 void Stixel::set_disparity(::google::protobuf::uint32 value) {
  set_has_disparity();
  disparity_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.disparity)
}

// required .doppia_protobuf.Stixel.Type type = 6;
bool Stixel::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Stixel::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void Stixel::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void Stixel::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::doppia_protobuf::Stixel_Type Stixel::type() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.type)
  return static_cast< ::doppia_protobuf::Stixel_Type >(type_);
}
 void Stixel::set_type(::doppia_protobuf::Stixel_Type value) {
  assert(::doppia_protobuf::Stixel_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.type)
}

// optional int32 backward_delta_x = 7 [default = 0];
bool Stixel::has_backward_delta_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Stixel::set_has_backward_delta_x() {
  _has_bits_[0] |= 0x00000040u;
}
void Stixel::clear_has_backward_delta_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void Stixel::clear_backward_delta_x() {
  backward_delta_x_ = 0;
  clear_has_backward_delta_x();
}
 ::google::protobuf::int32 Stixel::backward_delta_x() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.backward_delta_x)
  return backward_delta_x_;
}
 void Stixel::set_backward_delta_x(::google::protobuf::int32 value) {
  set_has_backward_delta_x();
  backward_delta_x_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.backward_delta_x)
}

// optional bool valid_delta_x = 8 [default = false];
bool Stixel::has_valid_delta_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Stixel::set_has_valid_delta_x() {
  _has_bits_[0] |= 0x00000080u;
}
void Stixel::clear_has_valid_delta_x() {
  _has_bits_[0] &= ~0x00000080u;
}
void Stixel::clear_valid_delta_x() {
  valid_delta_x_ = false;
  clear_has_valid_delta_x();
}
 bool Stixel::valid_delta_x() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.valid_delta_x)
  return valid_delta_x_;
}
 void Stixel::set_valid_delta_x(bool value) {
  set_has_valid_delta_x();
  valid_delta_x_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.valid_delta_x)
}

// optional int32 backward_width = 9 [default = 1];
bool Stixel::has_backward_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Stixel::set_has_backward_width() {
  _has_bits_[0] |= 0x00000100u;
}
void Stixel::clear_has_backward_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void Stixel::clear_backward_width() {
  backward_width_ = 1;
  clear_has_backward_width();
}
 ::google::protobuf::int32 Stixel::backward_width() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixel.backward_width)
  return backward_width_;
}
 void Stixel::set_backward_width(::google::protobuf::int32 value) {
  set_has_backward_width();
  backward_width_ = value;
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixel.backward_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stixels::kImageNameFieldNumber;
const int Stixels::kStixelsFieldNumber;
const int Stixels::kGroundTopAndBottomFieldNumber;
const int Stixels::kGroundPlaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stixels::Stixels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:doppia_protobuf.Stixels)
}

void Stixels::InitAsDefaultInstance() {
  ground_top_and_bottom_ = const_cast< ::doppia_protobuf::GroundTopAndBottom*>(&::doppia_protobuf::GroundTopAndBottom::default_instance());
  ground_plane_ = const_cast< ::doppia_protobuf::Plane3d*>(&::doppia_protobuf::Plane3d::default_instance());
}

Stixels::Stixels(const Stixels& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:doppia_protobuf.Stixels)
}

void Stixels::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ground_top_and_bottom_ = NULL;
  ground_plane_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stixels::~Stixels() {
  // @@protoc_insertion_point(destructor:doppia_protobuf.Stixels)
  SharedDtor();
}

void Stixels::SharedDtor() {
  image_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete ground_top_and_bottom_;
    delete ground_plane_;
  }
}

void Stixels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stixels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stixels_descriptor_;
}

const Stixels& Stixels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stixels_2eproto();
  return *default_instance_;
}

Stixels* Stixels::default_instance_ = NULL;

Stixels* Stixels::New(::google::protobuf::Arena* arena) const {
  Stixels* n = new Stixels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stixels::Clear() {
  if (_has_bits_[0 / 32] & 13u) {
    if (has_image_name()) {
      image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ground_top_and_bottom()) {
      if (ground_top_and_bottom_ != NULL) ground_top_and_bottom_->::doppia_protobuf::GroundTopAndBottom::Clear();
    }
    if (has_ground_plane()) {
      if (ground_plane_ != NULL) ground_plane_->::doppia_protobuf::Plane3d::Clear();
    }
  }
  stixels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stixels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doppia_protobuf.Stixels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doppia_protobuf.Stixels.image_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stixels;
        break;
      }

      // repeated .doppia_protobuf.Stixel stixels = 2;
      case 2: {
        if (tag == 18) {
         parse_stixels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stixels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stixels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stixels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_ground_top_and_bottom;
        break;
      }

      // optional .doppia_protobuf.GroundTopAndBottom ground_top_and_bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_ground_top_and_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ground_top_and_bottom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ground_plane;
        break;
      }

      // optional .doppia_protobuf.Plane3d ground_plane = 4;
      case 4: {
        if (tag == 34) {
         parse_ground_plane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ground_plane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doppia_protobuf.Stixels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doppia_protobuf.Stixels)
  return false;
#undef DO_
}

void Stixels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doppia_protobuf.Stixels)
  // optional string image_name = 1;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doppia_protobuf.Stixels.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_name(), output);
  }

  // repeated .doppia_protobuf.Stixel stixels = 2;
  for (unsigned int i = 0, n = this->stixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stixels(i), output);
  }

  // optional .doppia_protobuf.GroundTopAndBottom ground_top_and_bottom = 3;
  if (has_ground_top_and_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ground_top_and_bottom_, output);
  }

  // optional .doppia_protobuf.Plane3d ground_plane = 4;
  if (has_ground_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ground_plane_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doppia_protobuf.Stixels)
}

::google::protobuf::uint8* Stixels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:doppia_protobuf.Stixels)
  // optional string image_name = 1;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doppia_protobuf.Stixels.image_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_name(), target);
  }

  // repeated .doppia_protobuf.Stixel stixels = 2;
  for (unsigned int i = 0, n = this->stixels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stixels(i), target);
  }

  // optional .doppia_protobuf.GroundTopAndBottom ground_top_and_bottom = 3;
  if (has_ground_top_and_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->ground_top_and_bottom_, target);
  }

  // optional .doppia_protobuf.Plane3d ground_plane = 4;
  if (has_ground_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->ground_plane_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doppia_protobuf.Stixels)
  return target;
}

int Stixels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional string image_name = 1;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional .doppia_protobuf.GroundTopAndBottom ground_top_and_bottom = 3;
    if (has_ground_top_and_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ground_top_and_bottom_);
    }

    // optional .doppia_protobuf.Plane3d ground_plane = 4;
    if (has_ground_plane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ground_plane_);
    }

  }
  // repeated .doppia_protobuf.Stixel stixels = 2;
  total_size += 1 * this->stixels_size();
  for (int i = 0; i < this->stixels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stixels(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stixels::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stixels* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stixels>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stixels::MergeFrom(const Stixels& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stixels_.MergeFrom(from.stixels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_name()) {
      set_has_image_name();
      image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_name_);
    }
    if (from.has_ground_top_and_bottom()) {
      mutable_ground_top_and_bottom()->::doppia_protobuf::GroundTopAndBottom::MergeFrom(from.ground_top_and_bottom());
    }
    if (from.has_ground_plane()) {
      mutable_ground_plane()->::doppia_protobuf::Plane3d::MergeFrom(from.ground_plane());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stixels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stixels::CopyFrom(const Stixels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stixels::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->stixels())) return false;
  if (has_ground_top_and_bottom()) {
    if (!this->ground_top_and_bottom_->IsInitialized()) return false;
  }
  if (has_ground_plane()) {
    if (!this->ground_plane_->IsInitialized()) return false;
  }
  return true;
}

void Stixels::Swap(Stixels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stixels::InternalSwap(Stixels* other) {
  image_name_.Swap(&other->image_name_);
  stixels_.UnsafeArenaSwap(&other->stixels_);
  std::swap(ground_top_and_bottom_, other->ground_top_and_bottom_);
  std::swap(ground_plane_, other->ground_plane_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stixels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stixels_descriptor_;
  metadata.reflection = Stixels_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stixels

// optional string image_name = 1;
bool Stixels::has_image_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stixels::set_has_image_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Stixels::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stixels::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_name();
}
 const ::std::string& Stixels::image_name() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixels.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stixels::set_image_name(const ::std::string& value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:doppia_protobuf.Stixels.image_name)
}
 void Stixels::set_image_name(const char* value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:doppia_protobuf.Stixels.image_name)
}
 void Stixels::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:doppia_protobuf.Stixels.image_name)
}
 ::std::string* Stixels::mutable_image_name() {
  set_has_image_name();
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.Stixels.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Stixels::release_image_name() {
  clear_has_image_name();
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stixels::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    set_has_image_name();
  } else {
    clear_has_image_name();
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:doppia_protobuf.Stixels.image_name)
}

// repeated .doppia_protobuf.Stixel stixels = 2;
int Stixels::stixels_size() const {
  return stixels_.size();
}
void Stixels::clear_stixels() {
  stixels_.Clear();
}
const ::doppia_protobuf::Stixel& Stixels::stixels(int index) const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixels.stixels)
  return stixels_.Get(index);
}
::doppia_protobuf::Stixel* Stixels::mutable_stixels(int index) {
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.Stixels.stixels)
  return stixels_.Mutable(index);
}
::doppia_protobuf::Stixel* Stixels::add_stixels() {
  // @@protoc_insertion_point(field_add:doppia_protobuf.Stixels.stixels)
  return stixels_.Add();
}
::google::protobuf::RepeatedPtrField< ::doppia_protobuf::Stixel >*
Stixels::mutable_stixels() {
  // @@protoc_insertion_point(field_mutable_list:doppia_protobuf.Stixels.stixels)
  return &stixels_;
}
const ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::Stixel >&
Stixels::stixels() const {
  // @@protoc_insertion_point(field_list:doppia_protobuf.Stixels.stixels)
  return stixels_;
}

// optional .doppia_protobuf.GroundTopAndBottom ground_top_and_bottom = 3;
bool Stixels::has_ground_top_and_bottom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stixels::set_has_ground_top_and_bottom() {
  _has_bits_[0] |= 0x00000004u;
}
void Stixels::clear_has_ground_top_and_bottom() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stixels::clear_ground_top_and_bottom() {
  if (ground_top_and_bottom_ != NULL) ground_top_and_bottom_->::doppia_protobuf::GroundTopAndBottom::Clear();
  clear_has_ground_top_and_bottom();
}
const ::doppia_protobuf::GroundTopAndBottom& Stixels::ground_top_and_bottom() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixels.ground_top_and_bottom)
  return ground_top_and_bottom_ != NULL ? *ground_top_and_bottom_ : *default_instance_->ground_top_and_bottom_;
}
::doppia_protobuf::GroundTopAndBottom* Stixels::mutable_ground_top_and_bottom() {
  set_has_ground_top_and_bottom();
  if (ground_top_and_bottom_ == NULL) {
    ground_top_and_bottom_ = new ::doppia_protobuf::GroundTopAndBottom;
  }
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.Stixels.ground_top_and_bottom)
  return ground_top_and_bottom_;
}
::doppia_protobuf::GroundTopAndBottom* Stixels::release_ground_top_and_bottom() {
  clear_has_ground_top_and_bottom();
  ::doppia_protobuf::GroundTopAndBottom* temp = ground_top_and_bottom_;
  ground_top_and_bottom_ = NULL;
  return temp;
}
void Stixels::set_allocated_ground_top_and_bottom(::doppia_protobuf::GroundTopAndBottom* ground_top_and_bottom) {
  delete ground_top_and_bottom_;
  ground_top_and_bottom_ = ground_top_and_bottom;
  if (ground_top_and_bottom) {
    set_has_ground_top_and_bottom();
  } else {
    clear_has_ground_top_and_bottom();
  }
  // @@protoc_insertion_point(field_set_allocated:doppia_protobuf.Stixels.ground_top_and_bottom)
}

// optional .doppia_protobuf.Plane3d ground_plane = 4;
bool Stixels::has_ground_plane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Stixels::set_has_ground_plane() {
  _has_bits_[0] |= 0x00000008u;
}
void Stixels::clear_has_ground_plane() {
  _has_bits_[0] &= ~0x00000008u;
}
void Stixels::clear_ground_plane() {
  if (ground_plane_ != NULL) ground_plane_->::doppia_protobuf::Plane3d::Clear();
  clear_has_ground_plane();
}
const ::doppia_protobuf::Plane3d& Stixels::ground_plane() const {
  // @@protoc_insertion_point(field_get:doppia_protobuf.Stixels.ground_plane)
  return ground_plane_ != NULL ? *ground_plane_ : *default_instance_->ground_plane_;
}
::doppia_protobuf::Plane3d* Stixels::mutable_ground_plane() {
  set_has_ground_plane();
  if (ground_plane_ == NULL) {
    ground_plane_ = new ::doppia_protobuf::Plane3d;
  }
  // @@protoc_insertion_point(field_mutable:doppia_protobuf.Stixels.ground_plane)
  return ground_plane_;
}
::doppia_protobuf::Plane3d* Stixels::release_ground_plane() {
  clear_has_ground_plane();
  ::doppia_protobuf::Plane3d* temp = ground_plane_;
  ground_plane_ = NULL;
  return temp;
}
void Stixels::set_allocated_ground_plane(::doppia_protobuf::Plane3d* ground_plane) {
  delete ground_plane_;
  ground_plane_ = ground_plane;
  if (ground_plane) {
    set_has_ground_plane();
  } else {
    clear_has_ground_plane();
  }
  // @@protoc_insertion_point(field_set_allocated:doppia_protobuf.Stixels.ground_plane)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

// @@protoc_insertion_point(global_scope)
